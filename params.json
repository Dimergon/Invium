{"name":"PinCushion","tagline":"","body":"## PinCushion, a password manager in C&#35;\r\n\r\nCopyright &copy; 2013, 2014 Armin Altorffer\r\n\r\nPinCushion is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nPinCushion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See [the GNU General Public License](http://www.gnu.org/copyleft/gpl.html) for more details.\r\n\r\n### Features:\r\n\r\n- Create an infinite number of profiles, each with an infinite number of services, each of which with an infinite number of accounts.\r\n- Cross-platform, coded in C&#35; and fully functional in both .NET and Mono. PinCushion will run and behave in the exact same way across the following operating systems: Windows, Linux, MacOS.\r\n- Data is encrypted both on disk and in memory with AES 256-bit in conjunction with SHA-512 hashes.\r\n- Support for on-the-fly language switching; although currently no translations exist yet but these are easy to implement.\r\n- Very intuitive, easy to use interface.\r\n- Incredibly small; PinCushion itself is a single-file product. One executable that is a little over 50Kb in size, not counting the data file which is generated and which holds the actual data.\r\n\r\n### Getting PinCushion\r\n\r\nGetting PinCushion is very simple.\r\n\r\n1. Go to [this page](https://github.com/Altorffer/PinCushion/releases)\r\n2. Download the version appropriate to your OS and architecture. There are 32-bit and 64-bit downloads for Windows, Linux and MacOS.\r\n3. Place the downloaded executable in a folder of your chosing; there is no installation procedure involved.\r\n4. (Optional) Create a shortcut for it in whatever way you feel comfortable with.\r\n5. Start using it, you're done!\r\n\r\n### How to use PinCushion\r\n\r\nPinCushion has a very intuitive, easy to use interface so it should be self-explanatory for the most part but in case it is not, I'll quickly go through it now.\r\n\r\nFirst of all, when you launch it for the first time it will confront you with a password entry screen; this password is for PinCushion itself, you are prompted to enter its master password. Simply enter the password it, confirm it and click OK (or hit Enter).\r\n\r\nNext thing you will see is PinCushion's main screen; there is nothing more to PinCushion but the window you see before you now. Everything it can do and that you want it to do is from within this window. As I said, it's a very easy to use interface.\r\n\r\nIn this window you will see various types of objects, Profiles, Services, Accounts and Passwords.\r\n\r\nProfiles are what they are, profiles. You could use these to have multiple people make use of the same PinCushion (for example, on shared PC in a household) or you could use it to distinguish your own private passwords from your professional ones.\r\n\r\nServices are what you have accounts with and what you will need the password management for; so, services like Facebook, Google, Microsoft, Battle.net and so forth and so on. For each profile, you can have as many services as you like.\r\n\r\nAccounts should be obvious; you probably just added your first service to PinCushion, next you will need to tell PinCushion what your account name and password for that service are. For each service, you can have as many accounts as you like; for example, let's say you're a World of Warcraft multiboxer. You could use PinCushion to store the account details of each of your, oh, say, 36 accounts.\r\n\r\nYou probably have yourself a profile, at least 1 service and an account for each and every service you just added. You should know that data is saved with every form of data manipulation you perform; so each time you add a new profile, service or account. Or rename one or remove one or change a password.\r\n\r\nThere are a few additional things of note in the interface; first of all, the 3 check boxes in the lower left hand corner.\r\n\r\nThe top one (Show Password) will do what it says; it will disable the use of asterisk characters for the account's password and simply show you the actual password.\r\n\r\nThe next one, Read Only also does what it says. Normally, when there actually was data to load (so, when starting the program the 2nd, 3rd and so forth time), PinCushion will be in Read Only mode. To prevent you from accidentally messing things up. Simply uncheck Read Only to start manipulating data again.\r\n\r\nThe bottom one, Encrypt also does what it says, it governs whether or not PinCushion will actually store the data in an encrypted fashion. By default it does but there may be times when you need to store it unencrypted. Use this checkbox to accomplish that.\r\n\r\nNext, the bottom button, Set PinCushion Password. Use this to change PinCushion's master password.\r\n\r\nThere are a few buttons remaining, first of all is Set, the left button below the password field. Use this to manually set a new password for that account or to store a generated password (see below).\r\n\r\nNow for the final one, Generate and the closely linked password strength slider in the bottom right hand corner. PinCushion will allow you to generate passwords for the accounts you added to your services. From as small as 6 characters consisting of just lower-, uppercase and digits all the way up to 128 characters consisting of lower-, uppercase, digits and complex symbols. Generate will generate a password of the strength specified using the slider. It will copy this password to the clipboard but it will not automatically store it yet. This is to allow you to ensure that the service you generated the password for will actually accept the password. Once you have confirmed this, simply click Set and it has been stored.\r\n\r\nA few additional things of note -- Services, Accounts and Passwords and PinCushion's main window have a rightclick menu. Accounts and Passwords simply have a Copy to Clipboard function there but Services have a different menu here; PinCushion can be told to launch a program or a website for a specific service. Use the Service's rightclick menu to do this. For a website, simply enter its URL and it should allow PinCushion to launch that website in your default browser. But you can launch anything with this field, including, for example, Steam or the Battle.net Application or a specific game or program. The main window's rightclick menu will allow you to disable PinCushion's idle timeout functionality (PinCushion will quit after 5 minutes of not being used), change the language (once more translations have been made available, see bottom of this page) or let you import a data file (use this to, say, merge the PinCushion data files of 2 different PCs).\r\n\r\nNow you know all there is to know about using PinCushion.\r\n\r\n### Compiling PinCushion\r\n\r\nFor those interested in a more hands-on approach, compiling PinCushion should be relatively straightforward.\r\n\r\n1. From [this page](https://github.com/Altorffer/PinCushion) either clone the project using Git or just download the .ZIP.\r\n2. Open the solution (PinCushion.sln) in your favourite IDE (it has been compiled successfully in both Visual Studio Express as well as MonoDevelop).\r\n3. From the configurations menu (where you are able to select which configuration to use for the build) pick whichever platform you are building it for.\r\n  * .NET or Mono (both available in AnyCPU and x64)\r\n4. Build it and you should be able to find the executable in the PinCushion/bin subfolder of wherever you cloned/extracted PinCushion to.\r\n5. Copy that executable to wherever you want and run it.\r\n6. (Optional) Create a shortcut for it in whatever way you feel comfortable with.\r\n7. Start using it, you're done!\r\n\r\n### Contributing to the development of PinCushion\r\n\r\nWant to help develop PinCushion? If so, feel free to [fork](https://github.com/Altorffer/PinCushion) the project and start coding and hitting me with pull requests. Personally I would recommend Linux + MonoDevelop for the development. As far as the coding style is concerned; it is based on on-the-fly code formatting by MonoDevelop in conjunction with some tweaked StyleCop settings and it will be enforced. So expect any accepted pull request to go through some formatting changes.\r\n\r\nI could specifically use a hand with the translations. The infrastructure is there for on-the-fly language switching, the only thing lacking is actual translations. I am Dutch myself so will get around to that particular translation at some point but any additional languages I am more than willing to accept help with.","google":"UA-57637957-1","note":"Don't delete this file! It's used internally to help with page regeneration."}