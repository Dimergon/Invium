{"name":"PinCushion","tagline":"","body":"## PinCushion, a password manager in C&#35;\r\n\r\nCopyright &copy; 2013, 2014 Armin Altorffer\r\n\r\nPinCushion is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nPinCushion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\r\n\r\n### Features:\r\n\r\n- Create an infinite number of profiles, each with an infinite number of services, each of which with an infinite number of accounts.\r\n- Cross-platform, coded in C&#35; and fully functional in both .NET and Mono. PinCushion will run and behave in the exact same way across the following operating systems: Windows, Linux, MacOS.\r\n- Data is encrypted both on disk and in memory with AES 256-bit in conjunction with SHA-512 hashes.\r\n- Support for on-the-fly language switching; although currently no translations exist yet but these are easy to implement.\r\n- Very intuitive, easy to use interface.\r\n\r\n### Getting PinCushion\r\n\r\nGetting PinCushion is very simple\r\n\r\n1. Go to [this page](https://github.com/Altorffer/PinCushion/releases)\r\n2. Download the version appropriate to your OS and architecture. There are 32-bit and 64-bit downloads for Windows, Linux and MacOS.\r\n3. Place the downloaded executable in a folder of your chosing; there is no installation procedure involved.\r\n4. (Optional) Create a shortcut for it in whatever way you feel comfortable with.\r\n5. Start using it, you're done!\r\n\r\n### Compiling PinCushion\r\n\r\nFor those interested in a more hands-on approach, compiling PinCushion should be relatively straightforward.\r\n\r\n1. From [this page](https://github.com/Altorffer/PinCushion) either clone the project using Git or just download the .ZIP.\r\n2. Open the solution (PinCushion.sln) in your favourite IDE (it has been compiled successfully in both Visual Studio Express as well as MonoDevelop).\r\n3. From the configurations menu (where you are able to select which configuration to use for the build) pick whichever platform you are building it for.\r\n  * .NET or Mono (both available in AnyCPU and x64)\r\n4. Build it and you should be able to find the executable in the PinCushion/bin subfolder of wherever you cloned/extracted PinCushion to.\r\n5. Copy that executable to wherever you want and run it.\r\n6. (Optional) Create a shortcut for it in whatever way you feel comfortable with.\r\n7. Start using it, you're done!\r\n\r\n### Contributing to the development of PinCushion\r\n\r\nWant to help develop PinCushion? If so, feel free to [fork](https://github.com/Altorffer/PinCushion) the project and start coding and hitting me with pull requests. Personally I would recommend Linux + MonoDevelop for the development. As far as the coding style is concerned; it is based on on-the-fly code formatting by MonoDevelop in conjunction with some tweaked StyleCop settings and it will be enforced. So expect any accepted pull request to go through some formatting changes.\r\n\r\nI could specifically use a hand with the translations. The infrastructure is there for on-the-fly language switching, the only thing lacking is actual translations. I am Dutch myself so will get around to that particular translation at some point but any additional languages I am more than willing to accept help with.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}